permissions:
  contents: write
  actions: write

name: Release

on:
  create:
    tags:
      - 'v*'
      - 'commit-*'
  repository_dispatch:
    types: [new-tag-created]

jobs:
  release:
    strategy:
      matrix:
        os: [archlinux, manjarolinux]
        include:
          - os: archlinux
            container: archlinux:latest
          - os: manjarolinux
            container: docker.io/manjarolinux/build:latest

    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.container }}
      options: --init --privileged
      env:
        SCCACHE_GHA_ENABLED: "true"

    name: Release-${{ matrix.os }}
    steps:
      - name: Debug event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event payload: ${{ toJson(github.event.client_payload) }}"
      - name: install sudo and git (Linux)
        id: startup
        shell: bash
        run: |
          echo "container_name=${{ matrix.os }}" >> $GITHUB_OUTPUT
          pacman -Syu --noconfirm --needed
          pacman -S sudo git --noconfirm --needed
      - name: manjaro_jp
        if: matrix.os == 'manjarolinux'
        run: |
          (echo ;cat manjaro_jp.txt) | tee -a /etc/pacman.conf
          pacman -S curl htmlq --needed --noconfirm
          KEYRING=$(curl -s https://manjaro-jp.phoepsilonix.love/manjaro-jp/|htmlq 'a[href^="manjaro_jp"][href$=".zst"]' --attribute href)
          curl -LO https://manjaro-jp.phoepsilonix.love/manjaro-jp/$KEYRING
          pacman -U $KEYRING --noconfirm
          pacman-key --populate
          pacman -Syu --noconfirm --needed

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          set-safe-directory: 'true'
      - name: check
        run: |
          export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
          git config --global --add safe.directory $GITHUB_WORKSPACE
          COMMIT=$(grep "^_mozc_commit" ${{ matrix.os }}/PKGBUILD|cut -f2 -d"=")
          TAG=${GITHUB_REF##*/}
          if [[ $TAG == "main" ]];then
            echo "Running release for branch: ${{ github.event.client_payload.repo.branch }}"
            echo "Tag: ${{ github.event.client_payload.repo.tag }}"
            TAG="${{ github.event.client_payload.repo.tag }}"
          fi
          NEW_COMMIT=${TAG#commit-}
          if [[ "$COMMIT" != "$NEW_COMMIT" ]]; then
            git push origin $TAG -d || true
            exit 1
          fi
      - name: Setup non-root user
        run: |
          sudo useradd -m -d /github/workspace/ -s /usr/bin/bash nonroot
          sudo mkdir -p /github/workspace
          sudo mkdir -p /github/workspace/.cache
          sudo mkdir -p /github/workspace/.rustup
          sudo mkdir -p /github/workspace/.cargo
          sudo cp config.toml /github/workspace/.cargo/
          sudo chown -R nonroot:nonroot /github/workspace
          sudo -u nonroot whoami
          sudo -u nonroot id
          PATH=/usr/local/bin:$PATH
          CC=clang
          CXX=clang++
          LD=ld.mold
          echo "export PATH=$PATH" |sudo tee -a /etc/environment
          echo "export CC=$CC" |sudo tee -a /etc/environment
          echo "export CXX=$CXX" |sudo tee -a /etc/environment
          echo "export LD=$LD" |sudo tee -a /etc/environment
          whoami
          id
          source /etc/makepkg.conf
          echo $CPPFLAGS
          echo $CFLAGS
          echo $CXXFLAGS
          echo $LDFLAGS
          echo 
          sudo -u nonroot cp makepkg.conf /github/workspace/.makepkg.conf
          source ./makepkg.conf
          echo $CPPFLAGS
          echo $CFLAGS
          echo $CXXFLAGS
          echo $LDFLAGS
          echo "Defaults    timestamp_timeout=30"|sudo tee -a /etc/sudoers
        
      - name: Setup Mozc source for Tag
        run: |
          git clone --filter=tree:0 -b master https://github.com/phoepsilonix/mozc.git source
          cd source
          git config --global --add safe.directory $PWD

      - name: Setup Variables
        id: variables
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global push.gpgSign if-asked
          TAG=${GITHUB_REF##*/}
          pushd .
          if [[ $TAG == "main" ]];then
            echo "Running release for branch: ${{ github.event.client_payload.repo.branch }}"
            echo "Tag: ${{ github.event.client_payload.repo.tag }}"
            TAG="${{ github.event.client_payload.repo.tag }}"
          fi
          if [[ "$TAG" =~ ^commit- ]]; then
            cd source
            COMMIT=$(git log --merges --first-parent ${TAG#commit-} --pretty=%h -1)
            COMMIT=$(git show -s --format=%P $COMMIT master -1|cut -f2 -d" ")
            git checkout $COMMIT
            echo $TAG
            cd ..
            #git tag $TAG -d
            #git push origin $TAG -d
            cd source
            tag=$(git describe --tags --always ${COMMIT})
            base_tag="${tag%%-*}"
            if [[ "$tag" =~ "-" ]];then
              after_tag="${tag#*-}"
              FCITX_COMMIT=$(git rev-parse --short ${TAG#commit-})
              after_tag="${after_tag%-*}"-g${FCITX_COMMIT}
              echo $after_tag
              TAG=${base_tag}"-${{ matrix.os }}-"${after_tag}
              TAG2=${base_tag}"-${{ matrix.os }}-with-jp-dict-"${after_tag}
            else
              after_tag=""
              TAG=${base_tag}"-${{ matrix.os }}"
              TAG2=${base_tag}"-${{ matrix.os }}-with-jp-dict-"${after_tag}
            fi
            echo $TAG
            echo $TAG2
            echo $base_tag
            echo $after_tag
            TAG=${base_tag}"-${{ matrix.os }}-"${after_tag}
            TAG2=${base_tag}"-${{ matrix.os }}-with-jp-dict-"${after_tag}
            TAG=${TAG%*-}
            TAG2=${TAG2%*-}
            echo $TAG
            echo $TAG2
            cd ..
            git tag $TAG -d ||true
            git tag $TAG2 -d ||true
            git push origin $TAG -d ||true
            git push origin $TAG2 -d ||true
            git tag $TAG
            git tag $TAG2
            git push origin $TAG
            git push origin $TAG2
            echo "tag_name=" $TAG
            echo "tag_name_2=" $TAG2
            echo "tag_name=${TAG}" >> $GITHUB_OUTPUT
            echo "tag_name_2=${TAG2}" >> $GITHUB_OUTPUT
            echo "tag_commit=$(git log -1 --pretty=%H ${TAG})" >> $GITHUB_OUTPUT
            echo "base_tag=${base_tag}" >> $GITHUB_OUTPUT
          else
            echo $TAG
            tag=$TAG
            base_tag="${tag%%-*}"
            after_tag="${tag#*-${{ matrix.os }}}"
            TAG=${base_tag}"-${{ matrix.os }}-"${after_tag}
            TAG2=${base_tag}"-${{ matrix.os }}-with-jp-dict-"${after_tag}
            TAG=${TAG%*-}
            TAG2=${TAG2%*-}
            git tag $TAG -d ||true
            git tag $TAG2 -d ||true
            git push origin $TAG -d ||true
            git push origin $TAG2 -d ||true
            git tag $TAG
            git tag $TAG2
            git push origin $TAG
            git push origin $TAG2
            cd source
            COMMIT=$(git log -1 --pretty=%H $base_tag$after_tag)
            echo $COMMIT
            git checkout $COMMIT
            echo "tag_name=${TAG}" >> $GITHUB_OUTPUT
            echo "tag_name_2=${TAG2}" >> $GITHUB_OUTPUT
            echo "tag_commit=$(git log -1 --pretty=%H ${COMMIT})" >> $GITHUB_OUTPUT
            echo "base_tag=${base_tag}" >> $GITHUB_OUTPUT
          fi
          popd
          rm -rf source
          #SHA512SUMS=$(grep sha512sums= archlinux/PKGBUILD|sed "s|.*'\(.*\)'.*|\1|")
          #echo "fcitx5_mozc_checksum=$SHA512SUMS" >> $GITHUB_OUTPUT
          PKGVER=$(grep pkgver= archlinux/PKGBUILD|head -n1|cut -f2 -d"=")
          PKGREL=$(grep pkgrel= archlinux/PKGBUILD|head -n1|cut -f2 -d"=")
          echo "fcitx5_mozc_pkgver=$PKGVER" >> $GITHUB_OUTPUT
          echo "fcitx5_mozc_pkgrel=$PKGREL" >> $GITHUB_OUTPUT

      - name: check variables
        run: |
          echo "${{ steps.variables.outputs.tag_name }}"
          echo "${{ steps.variables.outputs.tag_name_2 }}"
          echo "${{ steps.variables.outputs.tag_commit }}"
          echo "${{ steps.variables.outputs.base_tag }}"
          #echo "${{ steps.variables.outputs.fcitx5_mozc_checksum }}"
          echo "${{ steps.variables.outputs.fcitx5_mozc_pkgver }}"
          echo "${{ steps.variables.outputs.fcitx5_mozc_pkgrel }}"

      - name: install build tools (Linux)
        shell: bash
        run: |
          pacman -S base-devel fakeroot qt6-base python python-six pkg-config curl mesa llvm clang ibus bazel rustup mold sccache --noconfirm --needed
          curl -Lo mold.tar.gz https://github.com/rui314/mold/releases/download/v2.34.1/mold-2.34.1-x86_64-linux.tar.gz
          tar -xf mold.tar.gz --strip-component=1 -C /usr/local/

      - name: Install bazel
        run: |
          mkdir -p /usr/local/bin
          curl -Lo /usr/local/bin/bazel https://github.com/bazelbuild/bazelisk/releases/download/v1.22.0/bazelisk-linux-amd64
          chmod +x /usr/local/bin/bazel
          chown -R nonroot:nonroot /github/workspace/.cache
          sudo -u nonroot bazel --version

      - name: Bazel Cache
        uses: actions/cache@v4
        with:
          path: |
            /github/workspace/.cache/bazel
          key: ${{ matrix.os }}-bazel-${{ steps.startup.outputs.container_name }}-${{ steps.variables.outputs.fcitx5_mozc_pkgver }}-${{ steps.variables.outputs.fcitx5_mozc_pkgrel }}
          restore-keys: |
            ${{ matrix.os }}-bazel-${{ steps.startup.outputs.container_name }}-${{ steps.variables.outputs.fcitx5_mozc_pkgver }}-${{ steps.variables.outputs.fcitx5_mozc_pkgrel }}
            ${{ matrix.os }}-bazel-${{ steps.startup.outputs.container_name }}-${{ steps.variables.outputs.fcitx5_mozc_pkgver }}-

      - name: Build
        shell: bash
        run: |
          sudo -u nonroot env|grep -E "PATH|CC|CXX|LD|CFLAGS|CXXFLAGS|LDFLAGS|CPPFLAGS"
          sudo -u nonroot bazel --version
          sudo -u nonroot ld.mold --version
          chown -R nonroot:nonroot .
          cd ${{ matrix.os }}
          sudo -u nonroot git clone --filter=tree:0 -b fcitx --mirror https://github.com/fcitx/mozc.git mozc
          sudo -u nonroot git config --add safe.directory $PWD/mozc
          cd mozc
          sudo -u nonroot git worktree add tmp
          sudo -u nonroot git worktree remove tmp
          sudo -u nonroot git branch -d tmp
          cd ..
          pacman -S fcitx fcitx-qt6 --noconfirm --needed
          sudo -u nonroot makepkg -osC -p PKGBUILD.fcitx --noconfirm
          sudo -u nonroot makepkg -ef -p PKGBUILD.fcitx
          pacman -R fcitx fcitx-qt6 --noconfirm
          pacman -S fcitx5 fcitx5-qt --noconfirm --needed
          sudo -u nonroot makepkg -ef -p PKGBUILD
          sudo -u nonroot mkdir -p ../release
          sudo -u nonroot mv *.pkg.tar.zst ../release/
          chown -R root:root ../
          chown -R nonroot:nonroot /github/workspace/.cache
      - name: Generate release note
        id: release_note
        shell: bash
        run: |
          git checkout main
          # FCITX_COMMIT
          git checkout HEAD~ -- last_commit.txt
          OLD_COMMIT=$(cat last_commit.txt)
          git checkout HEAD -- last_commit.txt
          NEW_COMMIT=$(cat last_commit.txt)
          cd ${{ matrix.os }}/mozc/
          if [[ "$OLD_COMMIT" == "$NEW_COMMIT" ]]; then
            # Mozc master branch
            NOTE=$(git log -1 master)
          else
            #NOTE=$(git log $OLD_COMMIT~..$NEW_COMMIT)
            NOTE=$(git log -1 master)
          fi
          {
          echo "release_note<<EOF"
          echo "${NOTE}"
          echo "EOF"
          } >> $GITHUB_OUTPUT
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ steps.variables.outputs.tag_name }}"
          name: "${{ steps.variables.outputs.tag_name }}"
          artifacts: 'release/*'
          token: ${{ secrets.GITHUB_TOKEN }}
          body: "${{ steps.release_note.outputs.release_note }}"

      - name: Mount rustup cache
        uses: actions/cache@v4
        with:
          path: |
            /github/workspace/.rustup
            /github/workspace/.cargo
            /github/workspace/.cache/sccache
          key: ${{ matrix.os }}-rustup-${{ steps.startup.outputs.container_name }}-${{ steps.variables.outputs.fcitx5_mozc_pkgver }}-${{ steps.variables.outputs.fcitx5_mozc_pkgrel }}
          restore-keys: |
            ${{ matrix.os }}-rustup-${{ steps.startup.outputs.container_name }}-${{ steps.variables.outputs.fcitx5_mozc_pkgver }}-${{ steps.variables.outputs.fcitx5_mozc_pkgrel }}
            ${{ matrix.os }}-rustup-${{ steps.startup.outputs.container_name }}-${{ steps.variables.outputs.fcitx5_mozc_pkgver }}-
            ${{ matrix.os }}-rustup-${{ steps.startup.outputs.container_name }}-
      - name: Install Rust(non root) for -with-jp-dict
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sudo -u nonroot sh -s -- -y
          echo "Running Rust program for ${{ matrix.os }}"

      - name: Build
        shell: bash
        run: |
          chown -R nonroot:nonroot .
          cd ${{ matrix.os }}
          sudo -u nonroot rm -rf *pkg.tar.zst
          pacman -R fcitx5 fcitx5-qt --noconfirm
          pacman -S fcitx fcitx-qt6 --noconfirm --needed
          sudo -u nonroot makepkg -osC -p PKGBUILD.fcitx.Dict
          sudo -u nonroot makepkg -ef -p PKGBUILD.fcitx.Dict
          pacman -R fcitx fcitx-qt6 --noconfirm
          pacman -S fcitx5 fcitx5-qt --noconfirm --needed
          sudo -u nonroot makepkg -ef -p PKGBUILD.Dict
          sudo -u nonroot mkdir -p ../release_2
          sudo -u nonroot mv *.pkg.tar.zst ../release_2/
          chown -R root:root ../
          chown -R nonroot:nonroot /github/workspace/.cache
      - name: Generate release note
        id: release_note_2
        shell: bash
        run: |
          git checkout main
          git checkout HEAD~ -- last_commit.txt
          OLD_COMMIT=$(cat last_commit.txt)
          git checkout HEAD -- last_commit.txt
          NEW_COMMIT=$(cat last_commit.txt)
          cd ${{ matrix.os }}/mozc
          if [[ "$OLD_COMMIT" == "$NEW_COMMIT" ]]; then
            NOTE=$(git log -1 master)
          else
           #NOTE=$(git log $OLD_COMMIT~..$NEW_COMMIT)
            NOTE=$(git log -1 master)
          fi
          {
          echo "release_note<<EOF"
          echo "Add Japanese dictionaries for improved tokenization"
          echo
          echo "- [SudachiDict: Lexicon for Sudachi tokenizer](https://github.com/WorksApplications/SudachiDict)"
          echo "- [Neologism dictionary for UniDic-MeCab](https://github.com/neologd/mecab-unidic-neologd/)"
          echo "- [Neologism dictionary for IPAdic-MeCab](https://github.com/neologd/mecab-ipadic-neologd/)"
          echo
          echo "${NOTE}"
          echo "EOF"
          } >> $GITHUB_OUTPUT
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ steps.variables.outputs.tag_name_2 }}"
          name: "${{ steps.variables.outputs.tag_name_2 }}"
          artifacts: 'release_2/*'
          token: ${{ secrets.GITHUB_TOKEN }}
          body: "${{ steps.release_note_2.outputs.release_note }}"
      - name: Delete tag if job failed
        if: failure()
        run: |
          TAG=${GITHUB_REF##*/}
          if [[ $TAG == "main" ]];then
            echo "Running release for branch: ${{ github.event.client_payload.repo.branch }}"
            echo "Tag: ${{ github.event.client_payload.repo.tag }}"
            TAG="${{ github.event.client_payload.repo.tag }}"
          fi
          git push origin -d $TAG || true
          gh release delete --cleanup-tag "${{ steps.variables.outputs.tag_name }}" || true
          gh release delete --cleanup-tag "${{ steps.variables.outputs.tag_name_2 }}" || true
          git push origin -d "${{ steps.variables.outputs.tag_name }}" || true
          git push origin -d "${{ steps.variables.outputs.tag_name_2 }}" || true

  tag-clear:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name "Masato TOYOSHIMA"
          git config user.email phoepsilonix@phoepsilonix.love
      - name: tag deletion
        shell: bash
        run: |
          TAG=${GITHUB_REF##*/}
          if [[ "$TAG" == "main" ]];then
            TAG="${{ github.event.client_payload.repo.tag }}"
          fi
          git push origin $TAG -d || true
      - name: gh release delete
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags
          OLD_RELEASES=$(git tag --points-at HEAD^)
          [[ -z $OLD_RELEASES ]] && OLD_RELEASES=$(git tag --points-at HEAD^^)
          [[ -z $OLD_RELEASES ]] && OLD_RELEASES=$(git tag --points-at HEAD^^^)
          [[ -z $OLD_RELEASES ]] && OLD_RELEASES=$(git tag --points-at HEAD^^^^)
          [[ -z $OLD_RELEASES ]] && OLD_RELEASES=$(git tag --points-at HEAD^^^^^)
          [[ -z $OLD_RELEASES ]] && OLD_RELEASES=$(git tag --points-at HEAD^^^^^^)
          if [[ "$(echo ${OLD_RELEASES}|grep -Eo "\-([^-]*)-g[^-]*$")" != "" ]];then
            echo ${OLD_RELEASES}
            echo ${OLD_RELEASES} | grep -E "\-([^-]*)-g[^-]*$" | xargs -n1 gh release delete --cleanup-tag -y || true
          fi
